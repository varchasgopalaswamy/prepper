"""
This type stub file was generated by pyright.
"""

"""
Core classes for the periodic table.

* :class:`PeriodicTable`
   The periodic table with attributes for each element.

   .. Note:: PeriodicTable is not a singleton class.  Use ``periodictable.element``
      to access the common table.

* :class:`Element`
   Element properties such as name, symbol, mass, density, etc.

* :class:`Isotope`
   Isotope properties such as mass, density and neutron scattering factors.

* :class:`Ion`
   Ion properties such as charge.

Elements are accessed from a periodic table using ``table[number]``,
``table.name`` or ``table.symbol`` where *symbol* is the two letter symbol.
Individual isotopes are accessed using ``element[isotope]``. Individual ions
are references using ``element.ion[charge]``.  Note that
``element[isotope].ion[charge].mass`` will depend on the particular charge
since we subtract the charge times the rest mass of the electron from the
overall mass.

Helper functions:

* :func:`delayed_load`
    Delay loading the element attributes until they are needed.

* :func:`get_data_path`
    Return the path to the periodic table data files.

* :func:`define_elements`
    Define external variables for each element in namespace.

* :func:`isatom`, :func:`iselement`, :func:`isisotope`, :func:`ision`
    Tests for different types of structure components.

* :func:`default_table`
    Returns the common periodic table.

* :func:`change_table`
    Return the same item from a different table.

.. seealso::

    :ref:`Adding properties <extending>` for details on extending the periodic
    table with your own attributes.

    :ref:`Custom tables <custom-table>` for details on managing your own
    periodic table with custom values for the attributes.

"""
from __future__ import annotations

from typing import Dict, Iterator, List

from pint._typing import QuantityOrUnitLike as Quantity

__docformat__ = ...
__all__ = [
    "delayed_load",
    "define_elements",
    "get_data_path",
    "default_table",
    "change_table",
    "Ion",
    "Isotope",
    "Element",
    "PeriodicTable",
    "isatom",
    "iselement",
    "isisotope",
    "ision",
]
PUBLIC_TABLE_NAME = ...

def delayed_load(
    all_props, loader, element=..., isotope=..., ion=...
):  # -> None:
    """
    Delayed loading of an element property table.  When any of property
    is first accessed the loader will be called to load the associated
    data. The help string starts out as the help string for the loader
    function. The attribute may be associated with any of :class:`Isotope`,
    :class:`Ion`, or :class:`Element`. Some properties, such as
    :mod:`mass <periodictable.mass>`, have both an isotope property for the
    mass of specific isotopes, as well as an element property for the
    mass of the collection of isotopes at natural abundance.  Set the
    keyword flags *element*, *isotope* and/or *ion* to specify which
    of these classes will be assigned specific information on load.
    """
    ...

class PeriodicTable:
    """
    Defines the periodic table of the elements with isotopes.
    Individidual elements are accessed by name, symbol or atomic number.
    Individual isotopes are addressable by ``element[mass_number]`` or
    ``elements.isotope(element name)``, ``elements.isotope(element symbol)``.

    For example, the following all retrieve iron:

    .. doctest::

        >>> from periodictable import *
        >>> print(elements[26])
        Fe
        >>> print(elements.Fe)
        Fe
        >>> print(elements.symbol('Fe'))
        Fe
        >>> print(elements.name('iron'))
        Fe
        >>> print(elements.isotope('Fe'))
        Fe


    To get iron-56, use:

    .. doctest::

        >>> print(elements[26][56])
        56-Fe
        >>> print(elements.Fe[56])
        56-Fe
        >>> print(elements.isotope('56-Fe'))
        56-Fe


    Deuterium and tritium are defined as 'D' and 'T'.  Some
    neutron properties are available in ``elements[0]``.

    To show all the elements in the table, use the iterator:

    .. doctest::

        >>> from periodictable import *
        >>> for el in elements:  # lists the element symbols
        ...     print("%s %s"%(el.symbol, el.name))  # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
        n neutron
        H hydrogen
        He helium
        ...
        Og oganesson


    .. Note::
           Properties can be added to the elements as needed, including *mass*,
           *nuclear* and *X-ray* scattering cross sections.
           See section :ref:`Adding properties <extending>` for details.
    """

    properties: List[str]
    _elements: Dict[int, Element]
    D: Isotope
    T: Isotope
    n: Element
    H: Element
    He: Element
    Li: Element
    Be: Element
    B: Element
    C: Element
    N: Element
    O: Element
    F: Element
    Ne: Element
    Na: Element
    Mg: Element
    Al: Element
    Si: Element
    P: Element
    S: Element
    Cl: Element
    Ar: Element
    K: Element
    Ca: Element
    Sc: Element
    Ti: Element
    V: Element
    Cr: Element
    Mn: Element
    Fe: Element
    Co: Element
    Ni: Element
    Cu: Element
    Zn: Element
    Ga: Element
    Ge: Element
    As: Element
    Se: Element
    Br: Element
    Kr: Element
    Rb: Element
    Sr: Element
    Y: Element
    Zr: Element
    Nb: Element
    Mo: Element
    Tc: Element
    Ru: Element
    Rh: Element
    Pd: Element
    Ag: Element
    Cd: Element
    In: Element
    Sn: Element
    Sb: Element
    Te: Element
    I: Element
    Xe: Element
    Cs: Element
    Ba: Element
    La: Element
    Ce: Element
    Pr: Element
    Nd: Element
    Pm: Element
    Sm: Element
    Eu: Element
    Gd: Element
    Tb: Element
    Dy: Element
    Ho: Element
    Er: Element
    Tm: Element
    Yb: Element
    Lu: Element
    Hf: Element
    Ta: Element
    W: Element
    Re: Element
    Os: Element
    Ir: Element
    Pt: Element
    Au: Element
    Hg: Element
    Tl: Element
    Pb: Element
    Bi: Element
    Po: Element
    At: Element
    Rn: Element
    Fr: Element
    Ra: Element
    Ac: Element
    Th: Element
    Pa: Element
    U: Element
    Np: Element
    Pu: Element
    Am: Element
    Cm: Element
    Bk: Element
    Cf: Element
    Es: Element
    Fm: Element
    Md: Element
    No: Element
    Lr: Element
    Rf: Element
    Db: Element
    Sg: Element
    Bh: Element
    Hs: Element
    Mt: Element
    Ds: Element
    Rg: Element
    Cn: Element
    Nh: Element
    Fl: Element
    Mc: Element
    Lv: Element
    Ts: Element
    Og: Element
    def __init__(self, table: str) -> None: ...
    def __getitem__(self, Z: int) -> Element:
        """
        Retrieve element Z.
        """
        ...
    def __iter__(
        self,
    ) -> Iterator[Element]:  # -> Generator[Unknown, Any, None]:
        """
        Process the elements in Z order
        """
        ...
    def symbol(self, input: str) -> Element | Isotope:  # -> Element | Isotope:
        """
        Lookup the an element in the periodic table using its symbol.  Symbols
        are included for 'D' and 'T : Element

        :Parameters:
            *input* : string
                Element symbol to be looked up in periodictable.

        :Returns: Element

        :Raises:
            ValueError if the element symbol is not defined.

        For example, print the element corresponding to 'Fe':

        .. doctest::

            >>> import periodictable
            >>> print(periodictable.elements.symbol('Fe'))
            Fe
        """
        ...
    def name(self, input: str) -> Element | Isotope:  # -> Element | Isotope
        """
        Lookup an element given its name.

        :Parameters:
            *input* : string
                Element name to be looked up in periodictable.

        :Returns: Element

        :Raises:
            *ValueError* if element does not exist.

        For example, print the element corresponding to 'iron':

        .. doctest::

            >>> import periodictable
            >>> print(periodictable.elements.name('iron'))
            Fe
        """
        ...
    def isotope(
        self, input: str
    ) -> Element | Isotope:  # -> Element | Isotope:
        """
        Lookup the element or isotope in the periodic table. Elements
        are assumed to be given by the standard element symbols. Isotopes
        are given by number-symbol, or 'D' and 'T' for 2-H and 3-H.

        :Parameters:
            *input* : string
                Element name or isotope to be looked up in periodictable.

        :Returns: Element

        :Raises:
            *ValueError* if element or isotope is not defined.

        For example, print the element corresponding to '58-Ni'.

        .. doctest::

            >>> import periodictable
            >>> print(periodictable.elements.isotope('58-Ni'))
            58-Ni
        """
        ...
    def list(self, *props, **kw):  # -> None:
        """
        Print a list of elements with the given set of properties.

        :Parameters:
            *prop1*, *prop2*, ... : string
                Name of the properties to print
            *format*: string
                Template for displaying the element properties, with one
                % for each property.

        :Returns: None

        For example, print a table of mass and density.

        .. doctest::

            >>> from periodictable import elements
            >>> elements.list('symbol : Element
            ...     format="%-2s: %6.2f u %5.2f g/cm^3") # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
            H :   1.01 u   0.07 g/cm^3
            He:   4.00 u   0.12 g/cm^3
            Li:   6.94 u   0.53 g/cm^3
            ...
            Bk: 247.00 u  14.00 g/cm^3
        """
        ...

class IonSet:
    def __init__(self, element_or_isotope) -> None: ...
    def __getitem__(self, charge): ...

class Ion:
    """
    Periodic table entry for an individual ion.

    An ion is associated with an element. In addition to the element
    properties (*symbol*, *name*, *atomic number*), it has specific ion
    properties (*charge*). Properties not specific to the ion (i.e., *charge*)
    are retrieved from the associated element.
    """

    def __init__(self, element, charge) -> None: ...
    def __getattr__(self, attr): ...
    @property
    def mass(self): ...
    def __str__(self) -> str: ...
    def __repr__(self): ...
    def __reduce__(self): ...

class Isotope:
    """
    Periodic table entry for an individual isotope.

    An isotope is associated with an element.  In addition to the element
    properties (*symbol*, *name*, *atomic number*), it has specific isotope
    properties (*isotope number*, *nuclear spin*, *relative abundance*).
    Properties not specific to the isotope (e.g., *x-ray scattering factors*)
    are retrieved from the associated element.
    """

    name: str
    symbol: str
    number: int
    mass: float
    density: float
    mass_units: str
    density_units: str
    element: Element

    # added in lotus
    base_symbol: str | None
    half_life: Quantity | None
    umass: Quantity | None
    udensity: Quantity | None
    isotope_id: int | None

    def __init__(self, element, isotope_number) -> None: ...
    def __getattr__(self, attr): ...
    def __str__(self) -> str: ...
    def __repr__(self): ...
    def __reduce__(self): ...

class Element:
    """
    Periodic table entry for an element.

    An element is a name, symbol and number, plus a set of properties.
    Individual isotopes can be referenced as element[*isotope_number*].
    Individual ionization states can be referenced by element.ion[*charge*].
    """

    table = ...
    charge = ...

    name: str
    symbol: str
    number: int
    mass: float
    density: float
    mass_units: str
    density_units: str
    _isotopes: List[Isotope]

    # added in lotus
    base_symbol: str | None
    umass: Quantity | None
    udensity: Quantity | None
    isotope_id: int | None

    def __init__(
        self, name: str, symbol: str, Z: int, ions, table
    ) -> None: ...
    @property
    def isotopes(self) -> List[int]:  # -> list[Unknown]:
        """List of all isotopes"""
        ...
    def add_isotope(self, number):
        """
        Add an isotope for the element.

        :Parameters:
            *number* : integer
                Isotope number, which is the number protons plus neutrons.

        :Returns: None
        """
        ...
    def __getitem__(self, number: int) -> Isotope: ...
    def __iter__(
        self,
    ) -> Iterator[Isotope]:  # -> Generator[Unknown, Any, None]:
        """
        Process the isotopes in order
        """
        ...
    def __repr__(self): ...
    def __reduce__(self): ...

def isatom(val):  # -> bool:
    """Return true if value is an element, isotope or ion"""
    ...

def isisotope(val):  # -> bool:
    """Return true if value is an isotope or isotope ion."""
    ...

def ision(val):  # -> bool:
    """Return true if value is a specific ion of an element or isotope"""
    ...

def iselement(val):  # -> bool:
    """Return true if value is an element or ion in natural abundance"""
    ...

def change_table(atom, table):
    """Search for the same element, isotope or ion from a different table"""
    ...

PRIVATE_TABLES = ...
element_base = ...

def default_table(table=...):  # -> PeriodicTable:
    """
    Return the default table unless a specific table has been requested.

    This is to be used in a context like::

        def summary(table=None):
            table = core.default_table(table)
            ...
    """
    ...

def define_elements(table, namespace):  # -> list[Unknown]:
    """
    Define external variables for each element in namespace. Elements
    are defined both by name and by symbol.

    This is called from *__init__* as::

        elements = core.default_table()
        __all__  += core.define_elements(elements, globals())

    :Parameters:
         *table* : PeriodicTable
             Set of elements
         *namespace* : dict
             Namespace in which to add the symbols.
    :Returns: [string, ...]
        A sequence listing the names defined.

    .. Note:: This will only work for *namespace* globals(), not locals()!
    """
    ...

def get_data_path(data):  # -> str:
    """
    Locate the directory for the tables for the named extension.

    :Parameters:
         *data* : string
              Name of the extension data directory.  For example, the xsf
              extension has data in the 'xsf' data directory.

    :Returns: string
         Path to the data.
    """
    ...

PUBLIC_TABLE = ...
