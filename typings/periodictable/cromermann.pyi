"""
This type stub file was generated by pyright.
"""

"""
Cromer-Mann formula for calculating x-ray scattering factors.
"""
from __future__ import annotations

__id__ = ...

def getCMformula(symbol):
    """
    Obtain Cromer-Mann formula and coefficients for a specified element.

    *symbol* : string
        symbol of an element

    Return instance of CromerMannFormula.
    """
    ...

def fxrayatq(symbol, Q, charge=...):
    """
    Return x-ray scattering factors of an element at a given Q.

    *symbol* : string
         symbol of an element or ion, e.g., "Ca", "Ca2+"
    *Q* : float or [float] | |1/Ang|
         Q value
    *charge* : int
         ion charge, overrides any valence suffixes such as "-", "+", "3+".

    Return float or numpy array.
    """
    ...

def fxrayatstol(symbol, stol, charge=...):
    """
    Calculate x-ray scattering factors at specified sin(theta)/lambda

    *symbol* : string
        symbol of an element or ion, e.g., "Ca", "Ca2+"
    *stol* : float or [float] | |1/Ang|
        sin(theta)/lambda
    *charge* : int
        ion charge, overrides any valence suffixes such as "-", "+", "3+".

    Return float or numpy.array.
    """
    ...

class CromerMannFormula:
    """
    Cromer-Mann formula for x-ray scattering factors.
    Coefficient storage and evaluation.

    Class data:

    *stollimit* : float | |1/Ang|
        maximum sin(theta)/lambda for which the formula works

    Attributes:

    *symbol* : string
        symbol of an element
    *a* : [float]
        a-coefficients
    *b* : [float]
        b-coefficients
    *c* : float
        c-coefficient
    """

    stollimit = ...
    def __init__(self, symbol, a, b, c) -> None:
        """
        Create a new instance of CromerMannFormula for specified element.

        No return value
        """
        ...
    def atstol(self, stol):  # -> Any:
        """
        Calculate x-ray scattering factors at specified sin(theta)/lambda

        *stol* : float or [float] | |1/Ang|
            sin(theta)/lambda

        Return float or numpy.array.
        """
        ...

_cmformulas = ...
